// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by NaINSTn and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
/**
 * CPU chip manages computations and program execution.
 * It interprets instructions fetched from memory.
 * Comments have been added for clarity.
 */


    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction decoding
    Not(in = instruction[15], out = aINST);
    Not(in = aINST, out = itsC);

    // Data handling units
    Mux16(a = instruction, b = outALU, sel = loadALU, out = inA);
    DRegister(in = outALU, load = loadD, out = outD);
    ARegister(in = inA, load = loadA, out = outA, out[0..14] = addressM);
    Mux16(a = outA, b = inM, sel = instruction[12], out = outAM);

    // Control unit signals
    And(a = itsC, b = instruction[5], out = loadALU);
    Or(a = aINST, b = instruction[5], out = loadA);
    And(a = instruction[4], b = itsC, out = loadD); 
    And(a = itsC, b = instruction[3], out = writeM);
    And(a = itsC, b = instruction[6], out = no);
    And(a = itsC, b = instruction[7], out = f);
    And(a = itsC, b = instruction[8], out = ny);
    And(a = itsC, b = instruction[9], out = zy);
    And(a = itsC, b = instruction[10], out = nx);
    And(a = itsC, b = instruction[11], out = zx);
    ALU(x = outD, y = outAM, zx = zx, nx = nx, zy = zy, ny = ny, f = f, no = no, out = outALU, out = outM, zr = zr, ng = ng);
    And(a = itsC, b = instruction[0], out = isGTjmp);
    And(a = itsC, b = instruction[1], out = isEQjmp);
    And(a = itsC, b = instruction[2], out = isLTjmp);
    And(a = ng, b = isLTjmp, out = j1);
    Not(in = ng, out = itsnotNG);
    And(a = zr, b = isEQjmp, out = j2);
    Not(in = zr, out = itsnotZR);
    And(a = itsnotNG, b = itsnotZR, out = GTZR);
    And(a = GTZR, b = isGTjmp, out = j3);
    Or(a = j1, b = j2, out = j12);
    Or(a = j12, b = j3, out = j4);

    // Program Counter control
    PC(in = outA, load = j4, inc = true, reset = reset, out[0..14] = pc);
}